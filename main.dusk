start|dusk
dfunction|end|{
>errorthrow|'This might be the last update :('|error
>@errorthrow well throws an error and stops the program
}
@start|dusk must be at the first line btw.
@start is the first thing that is run when you run dusk, it allows the dusk compiler to see which scripts are associated with it
@examples
assign|dawn|dusk examples
print|dawn
dassign|dawn
print|dawn
print|'this is just printing with text'
add|ad|1|2
print|ad
subtract|sd|1|2
@subtract and most arithmatic operator's arguments are |variable|val1|val2, the after-math of it will be assigned to the variable given
print|sd
multiply|md|1|2
print|md
divide|dd|1|2
print|dd
@window|name|width|height    not going to do this, but you can
@interact opens the REPL and gives you straight results for what you write, again I am not going to do this, but you can going to do this but you can.
time|time
@gets the local time and assigns it to a variable
print|time
cdir|exampleFolder
cfil|exampleFolder|exampleFile|dusk
writefil|exampleFolder|exampleFile|dusk{
>start|dusk
>print|'hello world'
>assign|t|'this is my first script using dusk!'
>print|t
}
@this is the first multi-line command, indentation is signified by '>' symbol.
@run dusk-1.0-exe NOT dusk-1.0.py, well you can but unless you have everything installed it won't work
scriptint|al|greater|4|10
print|al
@this interacts with python scripts, check out greater.py for a custom command that has input and output and check window.py for neither
dfunction|test|{
>assign|a|3
>assign|b|4
>multiply|c|a|b
>print|c
}
test|
@this is a function, it will run the code inside it, one by one upon calling it by the name, in this context the name is: test
input|inp|'test input: '
print|inp
@the input command takes the input from the terminal and stores it in a variable
sroot|sr|16
print|sr
@sroot is short for square root.
dassign|inp
dassign|sr
input|inp|'insert an integer: '
sroot|sr|inp
print|sr